import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Function to load data
def load_data():
    try:
        df = pd.read_excel('/Users/constantinkoster/Downloads/Mappe1.xlsx', names=['Date', 'Name', 'Amount'])
        return df
    except Exception as e:
        st.error(f"Error reading the file: {e}")
        return None

# Function to process data
def process_data(df):
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df['YearMonth'] = df['Date'].dt.to_period('M')
    df = df.dropna(subset=['Amount', 'YearMonth'])
    df.loc[:, 'Category'] = df['Amount'].apply(lambda x: 'Expense' if x < 0 else 'Income')
    return df

# Function to plot financials
def plot_financials(financial_df):
    plt.figure(figsize=(10, 6))
    # Adjust expenses to positive for visualization
    financial_df['AdjustedAmount'] = financial_df.apply(lambda x: -x['Amount'] if x['Category'] == 'Expense' else x['Amount'], axis=1)
    for category in financial_df['Category'].unique():
        category_df = financial_df[financial_df['Category'] == category]
        plt.plot(category_df['YearMonth'].dt.to_timestamp(), category_df['AdjustedAmount'], marker='o', label=category)
    # Plotting Net Savings
    net_savings = financial_df.groupby('YearMonth')['AdjustedAmount'].sum()
    plt.plot(net_savings.index.to_timestamp(), net_savings.values, marker='o', label='Net Savings')
    
    plt.title('Monthly Financial Overview')
    plt.xlabel('Month')
    plt.ylabel('Amount')
    plt.legend()
    plt.grid(True)
    st.pyplot(plt)

# Function to plot investment distribution
def plot_investment_distribution(investment_data):
    plt.figure(figsize=(6, 6))
    plt.pie(investment_data, labels=investment_data.index, autopct='%1.1f%%')
    plt.title('Investment Distribution')
    st.pyplot(plt)

# Page: Konten端bersicht
def kontenubersicht(df):
    st.title("Konten端bersicht")
    if df is not None:
        total_expenses = -df[df['Category'] == 'Expense']['Amount'].sum()
        total_income = df[df['Category'] == 'Income']['Amount'].sum()

        kontostand = total_income - total_expenses  # Account balance

        st.subheader("Kontostand: ")
        st.write(kontostand)

        # Monthly average of net savings
        monthly_net_savings = df.groupby('YearMonth')['Amount'].sum().mean()
        st.subheader("Monthly Average of Net Savings: ")
        st.write(monthly_net_savings)

# Page: Analyse
def analyse(df):
    st.title("Analyse")
    if df is not None:
        financial_df = df.groupby(['YearMonth', 'Category'])['Amount'].sum().reset_index()
        plot_financials(financial_df)

        # Calculate investment data
        investment_data = pd.Series({
            'Invest Stocks': financial_df[financial_df['Category'] == 'Income']['Amount'].sum() * 0.5,  # Example calculation
            'Invest Bonds': financial_df[financial_df['Category'] == 'Income']['Amount'].sum() * 0.5   # Example calculation
        })
        plot_investment_distribution(investment_data)

# Page: Empfehlung
def empfehlung(df):
    st.title("Empfehlung")
    st.write("Based on your financial data, here are some personalized recommendations:")

    if df is not None:
        monthly_net_savings = df.groupby('YearMonth')['Amount'].sum().mean()
        st.subheader("Budgeting Tips")
        st.write("Review your monthly expenses and identify areas where you can reduce spending.")

        st.subheader("Savings Goals")
        st.write(f"Based on your average monthly net savings of {monthly_net_savings:.2f}, consider setting aside a portion for short-term and long-term savings goals.")

        st.subheader("Investment Suggestions")
        st.write("Consider diversifying your investments to balance risk and returns. Stocks can offer growth potential while bonds can provide stability.")

        st.subheader("Emergency Fund")
        st.write("Aim to build an emergency fund that covers 3-6 months of living expenses.")

        st.subheader("Debt Management")
        st.write("If you have high-interest debt, consider strategies to pay it off as soon as possible.")

        st.subheader("Retirement Planning")
        st.write("It's never too early to start saving for retirement. Consider contributing to a retirement savings plan.")

        st.subheader("Learn More")
        st.markdown("[Financial Education Resources](https://www.example.com)")

def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Choose a page:", ["Konten端bersicht", "Analyse", "Empfehlung"])

    st.title("Financial Data Analysis App")

    # Load and process data
    df = load_data()
    if df is not None:
        df = process_data(df)

    if page == "Konten端bersicht":
        kontenubersicht(df)
    elif page == "Analyse":
        analyse(df)
    elif page == "Empfehlung":
        empfehlung(df)

if __name__ == "__main__":
    main()
