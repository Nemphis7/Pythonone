import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity

# Function to load financial data
def load_data():
    try:
        df = pd.read_excel('/Users/constantinkoster/Downloads/Mappe1.xlsx', names=['Date', 'Name', 'Amount'])
        return df
    except Exception as e:
        st.error(f"Error reading the financial data file: {e}")
        return None

# Function to fetch current stock price
def fetch_current_price(ticker):
    stock = yf.Ticker(ticker)
    return stock.info['regularMarketPrice']

# Function to load and update stock portfolio data
def load_stock_portfolio():
    try:
        stock_df = pd.read_excel('/Users/constantinkoster/Desktop/StockPortfolio.xlsx', names=['Ticker', 'Quantity'])
        stock_df['CurrentPrice'] = stock_df['Ticker'].apply(fetch_current_price)
        stock_df['TotalValue'] = stock_df['Quantity'] * stock_df['CurrentPrice']
        return stock_df
    except Exception as e:
        st.error(f"Error processing the stock portfolio file: {e}")
        return None

# Function to plot historical portfolio value
def plot_portfolio_history(stock_df):
    end = datetime.now()
    start = end - pd.DateOffset(years=3)
    portfolio_history = pd.DataFrame()

    for index, row in stock_df.iterrows():
        ticker = row['Ticker']
        stock_data = yf.download(ticker, start=start, end=end, progress=False)
        stock_data['Value'] = stock_data['Close'] * row['Quantity']
        portfolio_history[ticker] = stock_data['Value']

    portfolio_history['TotalValue'] = portfolio_history.sum(axis=1)
    portfolio_history['TotalValue'].plot(title='Portfolio Value Over Last 3 Years')
    plt.xlabel('Date')
    plt.ylabel('Total Value')
    st.pyplot(plt)

# Function to process data
def process_data(df):
    df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
    df['YearMonth'] = df['Date'].dt.to_period('M')
    df = df.dropna(subset=['Amount', 'YearMonth'])
    df.loc[:, 'Category'] = df['Amount'].apply(lambda x: 'Expense' if x < 0 else 'Income')
    return df

# Function to plot financials
def plot_financials(financial_df):
    plt.figure(figsize=(10, 6))
    financial_df['AdjustedAmount'] = financial_df.apply(lambda x: -x['Amount'] if x['Category'] == 'Expense' else x['Amount'], axis=1)
    for category in financial_df['Category'].unique():
        category_df = financial_df[financial_df['Category'] == category]
        plt.plot(category_df['YearMonth'].dt.to_timestamp(), category_df['AdjustedAmount'], marker='o', label=category)
    net_savings = financial_df.groupby('YearMonth')['AdjustedAmount'].sum()
    plt.plot(net_savings.index.to_timestamp(), net_savings.values, marker='o', label='Net Savings')
    
    plt.title('Monthly Financial Overview')
    plt.xlabel('Month')
    plt.ylabel('Amount')
    plt.legend()
    plt.grid(True)
    st.pyplot(plt)

# Page: Konten端bersicht
def kontenubersicht(df):
    st.title("Konten端bersicht")

    current_month = datetime.now().strftime('%Y-%m')
    current_month_period = pd.Period(current_month)

    if df is not None:
        current_month_data = df[df['YearMonth'] == current_month_period]
        current_month_expenses = -current_month_data[current_month_data['Category'] == 'Expense']['Amount'].sum()
        current_month_income = current_month_data[current_month_data['Category'] == 'Income']['Amount'].sum()

        st.subheader(f"Expenses in {current_month}: ")
        st.write(current_month_expenses)

        st.subheader(f"Income in {current_month}: ")
        st.write(current_month_income)

        total_expenses = -df[df['Category'] == 'Expense']['Amount'].sum()
        total_income = df[df['Category'] == 'Income']['Amount'].sum()
        kontostand = total_income - total_expenses

        st.subheader("Overall Kontostand: ")
        st.write(kontostand)

        monthly_net_savings = df.groupby('YearMonth')['Amount'].sum().mean()
        st.subheader("Monthly Average of Net Savings: ")
        st.write(monthly_net_savings)

    # Load and display stock portfolio
    st.subheader("My Stock Portfolio")
    stock_portfolio_df = load_stock_portfolio()
    if stock_portfolio_df is not None:
        st.dataframe(stock_portfolio_df)
        portfolio_total_value = stock_portfolio_df['TotalValue'].sum()
        st.write(f"Total Portfolio Value: {portfolio_total_value}")

        # Plot portfolio history
        st.subheader("Portfolio Value Over Last 3 Years")
        plot_portfolio_history(stock_portfolio_df)

# Page: Analyse
def analyse(df):
    st.title("Analyse")
    if df is not None:
        financial_df = df.groupby(['YearMonth', 'Category'])['Amount'].sum().reset_index()
        plot_financials(financial_df)

# Function to make recommendations based on user portfolio and asset data
def make_recommendations(user_portfolio, asset_data):
    user_portfolio_df = pd.DataFrame(list(user_portfolio.items()), columns=['Ticker', 'Quantity'])
    merged_data = pd.merge(user_portfolio_df, asset_data, on='Ticker', how='left')

    # Calculate asset similarities using cosine similarity
    asset_similarity = cosine_similarity(merged_data.drop(['Ticker', 'Quantity'], axis=1))

    # Calculate weighted scores based on user portfolio and asset similarities
    weighted_scores = asset_similarity.dot(merged_data['Quantity'])

    recommendations = pd.DataFrame({'Ticker': asset_data['Ticker'], 'Score': weighted_scores})
    recommendations = recommendations.sort_values(by='Score', ascending=False)

    return recommendations

# Page: Empfehlung
def empfehlung(df, stock_portfolio_df):
    st.title("Empfehlung")
    
    # Create a user portfolio dictionary based on the stock portfolio
    user_portfolio = dict(zip(stock_portfolio_df['Ticker'], stock_portfolio_df['Quantity']))

    # Load asset data (you need to have this data with features like sector, risk, etc.)
    asset_data = pd.read_excel('path_to_asset_data.xlsx')

    # Call the recommendation function
    recommendations = make_recommendations(user_portfolio, asset_data)

    # Display recommendations in Streamlit
    st.subheader("Investment Recommendations:")
    st.dataframe(recommendations)

# Main function
def main():
    st.sidebar.title("Navigation")
    page = st.sidebar.radio("Choose a page:", ["Konten端bersicht", "Analyse", "Empfehlung"])

    st.title("Financial Data Analysis App")

    df = load_data()
    if df is not None:
        df = process_data(df)

    if page == "Konten端bersicht":
        kontenubersicht(df)
    elif page == "Analyse":
        analyse(df)
    elif page == "Empfehlung":
        empfehlung(df, stock_portfolio_df)

if __name__ == "__main__":
    main()
