{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import streamlit as st\
import pandas as pd\
import matplotlib.pyplot as plt\
import yfinance as yf\
from datetime import datetime\
from sklearn.metrics.pairwise import cosine_similarity\
import requests\
from bs4 import BeautifulSoup\
\
# Hilfsfunktion zur Formatierung der W\'e4hrungswerte\
def custom_format(value):\
    if pd.isna(value):\
        return None\
    else:\
        # Zuerst in einen String mit zwei Nachkommastellen umwandeln\
        value_str = f"\{value:,.2f\}"\
        # Ersetze Punkte durch Kommas und Kommas durch Punkte\
        value_str = value_str.replace(',', 'X').replace('.', ',').replace('X', '.')\
        return value_str\
\
\
# Funktion zum Laden der Finanzdaten\
def load_data():\
    try:\
        # Stellen Sie sicher, dass die Namen der Spalten korrekt sind.\
        df = pd.read_excel('/Users/moritzmahler/Documents/Uni/6. Semester/Financial Economics with Python/FIEP Projekt/Mappe1.xlsx', names=['Datum', 'Name', 'Betrag'])\
        # Konvertieren Sie das 'Datum' im deutschen Format in ein Datetime-Objekt.\
        df['Datum'] = pd.to_datetime(df['Datum'], format='%d.%m.%Y', errors='coerce')\
        # Entfernen Sie alle Zeilen mit NaN im 'Datum' nach der Konvertierung.\
        df = df.dropna(subset=['Datum'])\
        return df\
    except Exception as e:\
        st.error(f"Fehler beim Lesen der Finanzdatendatei: \{e\}")\
        return None\
\
\
# Function to fetch current stock price\
def fetch_current_price(ticker):\
    try:\
        stock = yf.Ticker(ticker)\
        # Verwenden Sie 'Close' anstelle von 'regularMarketPrice'\
        price = stock.history(period="1d")['Close'][-1]\
        return price\
    except Exception as e:\
        print(f"Fehler beim Abrufen der Daten f\'fcr \{ticker\}: \{e\}")\
        return None\
\
# Function to load and update stock portfolio data\
def load_stock_portfolio():\
    try:\
        stock_df = pd.read_excel('/Users/moritzmahler/Documents/Uni/6. Semester/Financial Economics with Python/FIEP Projekt/StockPortfolio.xlsx', names=['Ticker', 'Quantity'])\
        stock_df['CurrentPrice'] = stock_df['Ticker'].apply(fetch_current_price)\
        stock_df['TotalValue'] = stock_df['Quantity'] * stock_df['CurrentPrice']\
        \
        # Runden Sie 'CurrentPrice' und 'TotalValue' auf zwei Nachkommastellen und formatieren Sie sie\
        stock_df['CurrentPrice'] = stock_df['CurrentPrice'].round(2).apply(custom_format)\
        stock_df['TotalValue'] = stock_df['TotalValue'].round(2).apply(custom_format)\
        \
        return stock_df\
    except Exception as e:\
        st.error(f"Fehler beim Verarbeiten der Aktienportfolio-Datei: \{e\}")\
        return None\
\
\
# Function to plot historical portfolio value\
def plot_portfolio_history(stock_df):\
    end = datetime.now()\
    start = end - pd.DateOffset(years=3)\
    portfolio_history = pd.DataFrame()\
\
    for index, row in stock_df.iterrows():\
        ticker = row['Ticker']\
        stock_data = yf.download(ticker, start=start, end=end, progress=False)\
        stock_data['Value'] = stock_data['Close'] * row['Quantity']\
        portfolio_history[ticker] = stock_data['Value']\
\
    portfolio_history['TotalValue'] = portfolio_history.sum(axis=1)\
    portfolio_history['TotalValue'].plot(title='Portfolio Value Over Last 3 Years')\
    plt.xlabel('Date')\
    plt.ylabel('Total Value')\
    st.pyplot(plt)\
\
\
# Funktion zum Verarbeiten der Daten\
def process_data(df):\
    df['Betrag'] = pd.to_numeric(df['Betrag'], errors='coerce')\
    # 'Date' Spalte wird zu 'YearMonth' konvertiert.\
    df['YearMonth'] = df['Datum'].dt.to_period('M')\
    df.dropna(subset=['Betrag', 'YearMonth'], inplace=True)\
    return df\
\
\
\
# Function to plot financials\
def plot_financials(financial_df):\
    plt.figure(figsize=(10, 6))\
    financial_df['AdjustedAmount'] = financial_df.apply(lambda x: -x['Amount'] if x['Category'] == 'Expense' else x['Amount'], axis=1)\
    for category in financial_df['Category'].unique():\
        category_df = financial_df[financial_df['Category'] == category]\
        plt.plot(category_df['YearMonth'].dt.to_timestamp(), category_df['AdjustedAmount'], marker='o', label=category)\
    net_savings = financial_df.groupby('YearMonth')['AdjustedAmount'].sum()\
    plt.plot(net_savings.index.to_timestamp(), net_savings.values, marker='o', label='Net Savings')\
    \
    plt.title('Monthly Financial Overview')\
    plt.xlabel('Month')\
    plt.ylabel('Amount')\
    plt.legend()\
    plt.grid(True)\
    st.pyplot(plt)\
\
def kontenubersicht(df):\
    st.title("Finanzdaten Analyse-App")\
\
    aktueller_monat = datetime.now().strftime('%Y-%m')\
    aktueller_monat_periode = pd.Period(aktueller_monat)\
\
    if df is not None:\
        df_sorted = df.sort_values(by='Datum', ascending=False)\
\
        # Hier nehmen wir an, dass Ausgaben negative Betr\'e4ge sind\
        aktuelle_monatsdaten = df[df['Datum'].dt.to_period('M') == aktueller_monat_periode]\
        aktuelle_monatsausgaben = aktuelle_monatsdaten[aktuelle_monatsdaten['Betrag'] < 0]['Betrag'].sum()\
        aktuelle_monatseinnahmen = aktuelle_monatsdaten[aktuelle_monatsdaten['Betrag'] > 0]['Betrag'].sum()\
\
        st.subheader(f"Ausgaben in \{aktueller_monat\}:")\
        st.write(aktuelle_monatsausgaben)\
\
        with st.expander("Letzte 10 Ausgaben anzeigen"):\
            last_expenses = df_sorted[df_sorted['Betrag'] < 0].head(10)\
            st.dataframe(last_expenses[['Datum', 'Name', 'Betrag']])\
\
        st.subheader(f"Einnahmen in \{aktueller_monat\}:")\
        st.write(aktuelle_monatseinnahmen)\
\
        with st.expander("Letzte 10 Einnahmen anzeigen"):\
            last_incomes = df_sorted[df_sorted['Betrag'] > 0].head(10)\
            st.dataframe(last_incomes[['Datum', 'Name', 'Betrag']])\
\
        gesamtausgaben = aktuelle_monatsdaten[aktuelle_monatsdaten['Betrag'] < 0]['Betrag'].sum()\
        gesamteinnahmen = aktuelle_monatsdaten[aktuelle_monatsdaten['Betrag'] > 0]['Betrag'].sum()\
        kontostand = gesamteinnahmen + gesamtausgaben  # Beachten Sie das Pluszeichen hier\
\
        st.subheader("Gesamtkontostand:")\
        st.write(kontostand)\
\
        # Rest des Codes bleibt unver\'e4ndert\
\
\
     \
\
    # Load and display stock portfolio\
    st.subheader("My Stock Portfolio")\
    stock_portfolio_df = load_stock_portfolio()\
    if stock_portfolio_df is not None:\
        st.dataframe(stock_portfolio_df)\
        total_portfolio_value = sum(stock_portfolio_df['TotalValue'].str.replace('.', '').str.replace(',', '.').astype(float))\
        st.write(f"Total Portfolio Value: \{custom_format(total_portfolio_value)\}")\
        st.subheader("Portfolio Value Over Last 3 Years")\
        plot_portfolio_history(stock_portfolio_df)\
\
# Page: Analyse\
def analyse(df):\
    st.title("Analyse")\
    if df is not None:\
        financial_df = df.groupby(['YearMonth', 'Category'])['Amount'].sum().reset_index()\
        plot_financials(financial_df)\
\
# Function to make recommendations based on user portfolio and asset data\
def make_recommendations(user_portfolio, asset_data):\
    user_portfolio_df = pd.DataFrame(list(user_portfolio.items()), columns=['Ticker', 'Quantity'])\
    merged_data = pd.merge(user_portfolio_df, asset_data, on='Ticker', how='left')\
\
    # Calculate asset similarities using cosine similarity\
    asset_similarity = cosine_similarity(merged_data.drop(['Ticker', 'Quantity'], axis=1))\
\
    # Calculate weighted scores based on user portfolio and asset similarities\
    weighted_scores = asset_similarity.dot(merged_data['Quantity'])\
\
    recommendations = pd.DataFrame(\{'Ticker': asset_data['Ticker'], 'Score': weighted_scores\})\
    recommendations = recommendations.sort_values(by='Score', ascending=False)\
\
    return recommendations\
\
# Page: Empfehlung\
def empfehlung(df, stock_portfolio_df):\
    st.title("Empfehlung")\
    \
    # Create a user portfolio dictionary based on the stock portfolio\
    user_portfolio = dict(zip(stock_portfolio_df['Ticker'], stock_portfolio_df['Quantity']))\
\
    # Load asset data (you need to have this data with features like sector, risk, etc.)\
    asset_data = pd.read_excel('path_to_asset_data.xlsx')\
\
    # Call the recommendation function\
    recommendations = make_recommendations(user_portfolio, asset_data)\
\
    # Display recommendations in Streamlit\
    st.subheader("Investment Recommendations:")\
    st.dataframe(recommendations)\
\
## Funktion zum Hinzuf\'fcgen einer Buchung und Speichern in der Excel-Datei\
def add_entry_to_excel(date, name, amount, file_path):\
    # Datum im deutschen Format umwandeln\
    date_str = date.strftime('%d.%m.%Y')\
    # Neuen Eintrag erstellen\
    new_entry = pd.DataFrame(\{\
        'Datum': [date_str], \
        'Name': [name], \
        'Betrag': [amount]\
    \})\
    # Vorhandene Daten lesen\
    try:\
        df = pd.read_excel(file_path)\
        # Konvertieren Sie das 'Datum' in der vorhandenen DataFrame, wenn n\'f6tig\
        df['Datum'] = pd.to_datetime(df['Datum'], format='%d.%m.%Y', errors='coerce')\
        df = df.dropna(subset=['Datum'])  # Entfernen Sie Zeilen, wo das Datum fehlgeschlagen ist zu konvertieren\
        df['Datum'] = df['Datum'].dt.strftime('%d.%m.%Y')  # Formatieren Sie das Datum zur\'fcck ins deutsche Format\
    except FileNotFoundError:\
        # Wenn die Datei nicht existiert, erstellen Sie eine neue DataFrame\
        df = pd.DataFrame(columns=['Datum', 'Name', 'Betrag'])\
    # Neuen Eintrag zur DataFrame hinzuf\'fcgen\
    df = pd.concat([df, new_entry], ignore_index=True)\
    # DataFrame zur\'fcck in die Excel-Datei schreiben\
    df.to_excel(file_path, index=False)\
\
\
\
\
def show_new_entry_form(df):\
    with st.form("new_entry_form", clear_on_submit=True):\
        st.subheader("Neue Buchung hinzuf\'fcgen")\
        date = st.date_input("Datum", datetime.today())\
        name = st.text_input("Name")\
        amount = st.number_input("Betrag", step=1.0)\
        submitted = st.form_submit_button("Eintrag hinzuf\'fcgen")\
        if submitted:\
            file_path = '/Users/moritzmahler/Documents/Uni/6. Semester/Financial Economics with Python/FIEP Projekt/Mappe1.xlsx'\
            add_entry_to_excel(date, name, amount, file_path)\
            st.success("Buchung erfolgreich hinzugef\'fcgt.")\
            # Cache leeren, wenn Sie @st.cache verwenden\
            if 'load_data' in st.session_state:\
                del st.session_state['load_data']\
            # Aktualisierte Daten laden\
            return load_data()\
    return df\
\
# Neuer Tab im Streamlit-App f\'fcr Aktienkurse\
def aktienkurse():\
    st.title("Aktienkurse")\
    \
    # Eingabefeld f\'fcr den Aktienname oder Tickersymbol\
    aktien_name = st.text_input("Aktienname oder Tickersymbol eingeben:", "")\
    \
    if aktien_name:\
        # Aufruf der Funktion zum Webscraping, um die Daten zu erhalten\
        data = scrape_boerse_frankfurt(aktien_name)\
        \
        # Anzeigen der Daten\
        st.write(data)\
\
# Funktion zum Webscrapen von Daten von der B\'f6rse Frankfurt\
def scrape_boerse_frankfurt(ticker):\
    # Ersetzen Sie 'ticker' durch die korrekte Art und Weise, wie Tickersymbole auf der B\'f6rse Frankfurt Webseite angezeigt werden.\
    url = f"https://www.boerse-frankfurt.de/aktie/\{ticker\}"\
\
    response = requests.get(url)\
\
    if response.status_code == 200:\
        soup = BeautifulSoup(response.text, 'html.parser')\
\
        # Ersetzen Sie 'YOUR_CLASS_OR_ID_FOR_KURS' durch die tats\'e4chliche Klasse oder ID, die das Kurselement umgibt.\
        kurs_element = soup.find('div', class_='YOUR_CLASS_OR_ID_FOR_KURS')\
        if kurs_element:\
            kurs = kurs_element.text.strip()\
            return kurs\
        else:\
            return "Kurs konnte nicht gefunden werden"\
    else:\
        return f"Die Webseite konnte nicht erreicht werden, Statuscode: \{response.status_code\}"\
\
\
\
\
def main():\
    st.sidebar.title("Navigation")\
    page = st.sidebar.radio("W\'e4hle eine Seite", ["Konten\'fcbersicht", "Analyse", "Empfehlung", "Aktienkurse"])\
\
    st.title("Finanzdaten Analyse-App")\
\
    if 'dataframe' not in st.session_state or page == "Konten\'fcbersicht":\
        st.session_state.dataframe = load_data()\
\
    df = st.session_state.dataframe\
    if df is not None:\
        df = process_data(df)\
\
    if page == "Konten\'fcbersicht":\
        df = show_new_entry_form(df)\
        st.session_state.dataframe = df  # Aktualisierte Daten im Session State speichern\
        kontenubersicht(df)\
    elif page == "Analyse":\
        analyse(df)\
    elif page == "Empfehlung":\
        empfehlung(df, load_stock_portfolio())\
    elif page == "Aktienkurse":\
        aktienkurse()  # Die Funktion zum Anzeigen der Aktienkurse\
\
if __name__ == "__main__":\
    main()}