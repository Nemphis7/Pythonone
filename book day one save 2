import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime
from sklearn.metrics.pairwise import cosine_similarity
import requests
import plotly.graph_objects as go

def custom_format(value):
    # Format a numerical value with comma as the thousand separator and period as the decimal separator
    if pd.isna(value):
        return None
    else:
        formatted_value = f"{value:,.2f}"
        formatted_value = formatted_value.replace(',', 'X').replace('.', ',').replace('X', '.')
        return formatted_value

def fetch_current_price(ticker):
    # Fetch the current stock price for a given ticker symbol
    try:
        stock = yf.Ticker(ticker)
        price = stock.history(period="1d")['Close'][-1]
        return price
    except Exception as e:
        raise Exception(f"Error fetching data for {ticker}: {e}")

def get_fundamental_data(ticker):
    # Fetch fundamental data for a given ticker symbol
    stock = yf.Ticker(ticker)
    info = stock.info
    pe_ratio = float(info.get('trailingPE')) if 'trailingPE' in info else None
    market_cap = float(info.get('marketCap')) if 'marketCap' in info else None
    dividend_yield = float(info.get('dividendYield')) if 'dividendYield' in info else None
    return

def load_data():
    # Load financial data from a specified URL
    try:
        url = 'https://raw.githubusercontent.com/Nemphis7/Pythonone/main/Mappe1.xlsx'
        df = pd.read_excel(url, names=['Date', 'Name', 'Amount'])
        return df
    except Exception as e:
        st.error(f"Error reading financial data file: {e}")
        return None

def load_stock_portfolio():
    # Load stock portfolio data from a specified URL
    try:
        url = 'https://raw.githubusercontent.com/Nemphis7/Pythonone/main/StockPortfolio.xlsx'
        stock_df = pd.read_excel(url, names=['Ticker', 'Quantity'])
        stock_df['CurrentPrice'] = stock_df['Ticker'].apply(fetch_current_price)
        stock_df.dropna(subset=['CurrentPrice'], inplace=True)
        stock_df = stock_df[stock_df['CurrentPrice'] != 0]
        stock_df['TotalValue'] = stock_df['Quantity'] * stock_df['CurrentPrice']
        stock_df['CurrentPrice'] = stock_df['CurrentPrice'].round(2).apply(custom_format)
        stock_df['TotalValue'] = stock_df['TotalValue'].round(2).apply(custom_format)
        return stock_df
    except Exception as e:
        st.error(f"Error processing stock portfolio file: {e}")
        return None

def process_data(df):
    # Process and clean the data for further analysis
    if df is not None and 'Date' in df.columns:
        df['Amount'] = pd.to_numeric(df['Amount'], errors='coerce')
        df['Date'] = pd.to_datetime(df['Date'], errors='coerce')
        df = df.dropna(subset=['Date'])
        df['YearMonth'] = df['Date'].dt.to_period('M')
        df.dropna(subset=['Amount', 'YearMonth'], inplace=True)
        return df
    else:
        st.error("Invalid or missing 'Date' column in DataFrame")
        return None

# ... Rest of the code remains mostly unchanged, just translated ...

if __name__ == "__main__":
    main()
